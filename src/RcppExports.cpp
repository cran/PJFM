// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEnsmallen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// init_CoxFM
List init_CoxFM(const List& datalist, const List& paralist, int maxiter, double eps);
RcppExport SEXP _PJFM_init_CoxFM(SEXP datalistSEXP, SEXP paralistSEXP, SEXP maxiterSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type datalist(datalistSEXP);
    Rcpp::traits::input_parameter< const List& >::type paralist(paralistSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(init_CoxFM(datalist, paralist, maxiter, eps));
    return rcpp_result_gen;
END_RCPP
}
// PJFM
List PJFM(const List& datalist, const List& paralist, int maxiter, double eps);
RcppExport SEXP _PJFM_PJFM(SEXP datalistSEXP, SEXP paralistSEXP, SEXP maxiterSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type datalist(datalistSEXP);
    Rcpp::traits::input_parameter< const List& >::type paralist(paralistSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(PJFM(datalist, paralist, maxiter, eps));
    return rcpp_result_gen;
END_RCPP
}
// PJFM_numH
double PJFM_numH(const arma::vec para_all, const List& datalist, List& paralist, double eps, bool noMUV);
RcppExport SEXP _PJFM_PJFM_numH(SEXP para_allSEXP, SEXP datalistSEXP, SEXP paralistSEXP, SEXP epsSEXP, SEXP noMUVSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type para_all(para_allSEXP);
    Rcpp::traits::input_parameter< const List& >::type datalist(datalistSEXP);
    Rcpp::traits::input_parameter< List& >::type paralist(paralistSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type noMUV(noMUVSEXP);
    rcpp_result_gen = Rcpp::wrap(PJFM_numH(para_all, datalist, paralist, eps, noMUV));
    return rcpp_result_gen;
END_RCPP
}
// PJFM_pred
arma::vec PJFM_pred(const List& datalist, const List& paralist);
RcppExport SEXP _PJFM_PJFM_pred(SEXP datalistSEXP, SEXP paralistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type datalist(datalistSEXP);
    Rcpp::traits::input_parameter< const List& >::type paralist(paralistSEXP);
    rcpp_result_gen = Rcpp::wrap(PJFM_pred(datalist, paralist));
    return rcpp_result_gen;
END_RCPP
}
// PJFM_covBD
List PJFM_covBD(const List& datalist, const List& paralist, const arma::vec& gvec, double lam, double ridge, int maxiter, double eps);
RcppExport SEXP _PJFM_PJFM_covBD(SEXP datalistSEXP, SEXP paralistSEXP, SEXP gvecSEXP, SEXP lamSEXP, SEXP ridgeSEXP, SEXP maxiterSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type datalist(datalistSEXP);
    Rcpp::traits::input_parameter< const List& >::type paralist(paralistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gvec(gvecSEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< double >::type ridge(ridgeSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(PJFM_covBD(datalist, paralist, gvec, lam, ridge, maxiter, eps));
    return rcpp_result_gen;
END_RCPP
}
// PJFM_covBD_seq
List PJFM_covBD_seq(const List& datalist, const List& paralist, const arma::vec& gvec, int nlam, double ridge, int pmax, const double min_ratio, const int maxiter, const double eps, const bool UseSurvN);
RcppExport SEXP _PJFM_PJFM_covBD_seq(SEXP datalistSEXP, SEXP paralistSEXP, SEXP gvecSEXP, SEXP nlamSEXP, SEXP ridgeSEXP, SEXP pmaxSEXP, SEXP min_ratioSEXP, SEXP maxiterSEXP, SEXP epsSEXP, SEXP UseSurvNSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type datalist(datalistSEXP);
    Rcpp::traits::input_parameter< const List& >::type paralist(paralistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gvec(gvecSEXP);
    Rcpp::traits::input_parameter< int >::type nlam(nlamSEXP);
    Rcpp::traits::input_parameter< double >::type ridge(ridgeSEXP);
    Rcpp::traits::input_parameter< int >::type pmax(pmaxSEXP);
    Rcpp::traits::input_parameter< const double >::type min_ratio(min_ratioSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const bool >::type UseSurvN(UseSurvNSEXP);
    rcpp_result_gen = Rcpp::wrap(PJFM_covBD_seq(datalist, paralist, gvec, nlam, ridge, pmax, min_ratio, maxiter, eps, UseSurvN));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_PJFM_init_CoxFM", (DL_FUNC) &_PJFM_init_CoxFM, 4},
    {"_PJFM_PJFM", (DL_FUNC) &_PJFM_PJFM, 4},
    {"_PJFM_PJFM_numH", (DL_FUNC) &_PJFM_PJFM_numH, 5},
    {"_PJFM_PJFM_pred", (DL_FUNC) &_PJFM_PJFM_pred, 2},
    {"_PJFM_PJFM_covBD", (DL_FUNC) &_PJFM_PJFM_covBD, 7},
    {"_PJFM_PJFM_covBD_seq", (DL_FUNC) &_PJFM_PJFM_covBD_seq, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_PJFM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
